/* --COPYRIGHT--,BSD
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/
#include "grlib.h"
#include "radioButton.h"
#include "checkbox.h"
#include "LcdDriver/Sharp128x128.h"
#include "images/images.h"
#include "driverlib.h"
#include "stdint.h"

#include <time.h>
#include <stdlib.h>

void clockInit(void);
void boardInit();

Graphics_Context g_sContext;
uint8_t g_delayCounter = 0;

#if defined(__IAR_SYSTEMS_ICC__)
int16_t __low_level_init(void) {
    // Stop WDT (Watch Dog Timer)
    WDTCTL = WDTPW + WDTHOLD;
    return(1);
}
#endif

const int IMAGESIZE = 32;
const int CHANNEL = 1;

const int depth = 1;
const int strike = 1;
const int kernelSize = 5;
const int outputSize = IMAGESIZE - kernelSize + 1;

#pragma PERSISTENT(image)
double image[1][IMAGESIZE][IMAGESIZE][CHANNEL] = {0};
#pragma PERSISTENT(filter)
double filter[depth][kernelSize][kernelSize][CHANNEL] = {0};
#pragma PERSISTENT(output)
double output[depth][outputSize][outputSize][CHANNEL] = {0};

char *numbers = "0123456789D";
int timer1 = 0;
int timer2 = 0;

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;               // Stop Watchdog Timer

    P1DIR |= BIT0;                          // Set P1.0 as output

    PJSEL0 = BIT4 | BIT5;                   // Initialize LFXT pins

    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    // Configure LFXT 32kHz crystal
    CSCTL0_H = CSKEY_H;                     // Unlock CS registers
    CSCTL4 &= ~LFXTOFF;                     // Enable LFXT
    do
    {
      CSCTL5 &= ~LFXTOFFG;                  // Clear LFXT fault flag
      SFRIFG1 &= ~OFIFG;
    } while (SFRIFG1 & OFIFG);              // Test oscillator fault flag
    CSCTL0_H = 0;                           // Lock CS registers

    // Configure RTC_C
    RTCCTL0_H = RTCKEY_H;                   // Unlock RTC
    RTCCTL0_L = RTCTEVIE_L | RTCRDYIE_L;    // enable RTC read ready interrupt
                                            // enable RTC time event interrupt

    RTCCTL13 = RTCBCD | RTCHOLD | RTCMODE;  // RTC enable, BCD mode, RTC hold

    RTCYEAR = 0x2010;                       // Year = 0x2010
    RTCMON = 0x4;                           // Month = 0x04 = April
    RTCDAY = 0x05;                          // Day = 0x05 = 5th
    RTCDOW = 0x01;                          // Day of week = 0x01 = Monday
    RTCHOUR = 0x10;                         // Hour = 0x10
    RTCMIN = 0x32;                          // Minute = 0x32
    RTCSEC = 0x45;                          // Seconds = 0x45

    RTCADOWDAY = 0x2;                       // RTC Day of week alarm = 0x2
    RTCADAY = 0x20;                         // RTC Day Alarm = 0x20
    RTCAHOUR = 0x10;                        // RTC Hour Alarm
    RTCAMIN = 0x23;                         // RTC Minute Alarm

    RTCCTL13 &= ~(RTCHOLD);                 // Start RTC

    uint16_t gie;

    boardInit();
    clockInit();

    // Set up the LCD
    Sharp128x128_initDisplay();

    /*
     * Disable the GPIO power-on default high-impedance mode to activate
     * previously configured port settings
     */

    PMM_unlockLPM5();

    __enable_interrupt();

    Graphics_initContext(&g_sContext, &g_sharp128x128LCD);
    Graphics_setForegroundColor(&g_sContext, ClrBlack);
    Graphics_setBackgroundColor(&g_sContext, ClrWhite);
    Graphics_setFont(&g_sContext, &g_sFontFixed6x8);
    Graphics_clearDisplay(&g_sContext);
    // Store current GIE state
    gie = __get_SR_register() & GIE;
    __disable_interrupt();
    // Flush Buffer to LCD
    Graphics_flushBuffer(&g_sContext);
    // Restore original GIE state
    __bis_SR_register(gie);

    srand(time(NULL));
    //Initial image
    int i;
    for (i = 0; i < IMAGESIZE; i++)
    {
        int j;
        for (j = 0; j < IMAGESIZE; j++)
        {
            int k;
            for (k = 0; k < CHANNEL; k++)
            {
                image[0][i][j][k] = (rand()%100000)*0.00001;
            }
        }
    }

    //----------------------Convolution--------------------------

    //Initial filter
    int d;
    for(d = 0; d < depth; d++)
    {
        int i;
        for (i = 0; i < kernelSize; i++)
        {
            int j;
            for (j = 0; j < kernelSize; j++)
            {
                int k;
                for (k = 0; k < CHANNEL; k++)
                {
                    filter[d][i][j][k] = (double)rand() / (RAND_MAX + 1.0);
                }
            }
        }
    }

    //Convolution
    for (d = 0; d < depth; d++)
    {
        int g;
        for (g = 0; g < outputSize; g++)
        {
            int h;
            for (h = 0; h < outputSize; h++)
            {
                int i;
                for (i = 0; i < kernelSize; i++)
                {
                    int j;
                    for (j = 0; j < kernelSize; j++)
                    {
                        int k;
                        for (k = 0; k < CHANNEL; k++)
                        {
                            output[d][g][h][k] += filter[d][i][j][k] * image[0][i+g][j+h][k];
                        }
                    }
                }
            }
        }
    }

    Graphics_drawStringCentered(&g_sContext,
                                        "Timer:",
                                        AUTO_STRING_LENGTH,
                                        48,
                                        50,
                                        TRANSPARENT_TEXT);
            Graphics_drawStringCentered(&g_sContext,
                                        numbers+timer2,
                                        1,
                                        75,
                                        50,
                                        TRANSPARENT_TEXT);
            Graphics_drawStringCentered(&g_sContext,
                                        numbers+timer1,
                                        1,
                                        82,
                                        50,
                                        TRANSPARENT_TEXT);

    // Store current GIE state
    gie = __get_SR_register() & GIE;
    __disable_interrupt();
    // Flush Buffer to LCD
    Graphics_flushBuffer(&g_sContext);
    // Restore original GIE state
    __bis_SR_register(gie);


    //    __bis_SR_register(LPM0_bits + GIE);
    __bis_SR_register(LPM3_bits | GIE);     // Enter LPM3 mode w/ interrupts enabled
    __no_operation();
}

void clockInit(void)
{
    CS_setDCOFreq(CS_DCORSEL_1,CS_DCOFSEL_3);

    CS_initClockSignal(
        CS_ACLK,
        CS_VLOCLK_SELECT,
        CS_CLOCK_DIVIDER_1
        );

    CS_initClockSignal(
        CS_SMCLK,
        CS_DCOCLK_SELECT,
        CS_CLOCK_DIVIDER_1
        );

    CS_initClockSignal(
        CS_MCLK,
        CS_DCOCLK_SELECT,
        CS_CLOCK_DIVIDER_1
        );
}

void boardInit()
{
    GPIO_setAsOutputPin(GPIO_PORT_PA,
                        GPIO_PIN0 + GPIO_PIN1 + GPIO_PIN2 + GPIO_PIN3 +
                        GPIO_PIN4 + GPIO_PIN5 + GPIO_PIN6 + GPIO_PIN7 +
                        GPIO_PIN8 + GPIO_PIN9 + GPIO_PIN10 + GPIO_PIN11 +
                        GPIO_PIN12 + GPIO_PIN13 + GPIO_PIN14 + GPIO_PIN15);

    GPIO_setAsOutputPin(GPIO_PORT_PB,
                        GPIO_PIN0 + GPIO_PIN1 + GPIO_PIN2 + GPIO_PIN3 +
                        GPIO_PIN4 + GPIO_PIN5 + GPIO_PIN6 + GPIO_PIN7 +
                        GPIO_PIN8 + GPIO_PIN9 + GPIO_PIN10 + GPIO_PIN11 +
                        GPIO_PIN12 + GPIO_PIN13 + GPIO_PIN14 + GPIO_PIN15);

    GPIO_setOutputLowOnPin(GPIO_PORT_PA,
                           GPIO_PIN0 + GPIO_PIN1 + GPIO_PIN2 + GPIO_PIN3 +
                           GPIO_PIN4 + GPIO_PIN5 + GPIO_PIN6 + GPIO_PIN7 +
                           GPIO_PIN8 + GPIO_PIN9 + GPIO_PIN10 + GPIO_PIN11 +
                           GPIO_PIN12 + GPIO_PIN13 + GPIO_PIN14 + GPIO_PIN15);

    GPIO_setOutputLowOnPin(GPIO_PORT_PB,
                           GPIO_PIN0 + GPIO_PIN1 + GPIO_PIN2 + GPIO_PIN3 +
                           GPIO_PIN4 + GPIO_PIN5 + GPIO_PIN6 + GPIO_PIN7 +
                           GPIO_PIN8 + GPIO_PIN9 + GPIO_PIN10 + GPIO_PIN11 +
                           GPIO_PIN12 + GPIO_PIN13 + GPIO_PIN14 + GPIO_PIN15);
}

//------------------------------------------------------------------------------
// Timer1 A1 Interrupt Service Routine. This ISR id use to generate delay on
// LCD before changing screen content. The ISR is triggered every 500 msec.
//------------------------------------------------------------------------------
#pragma vector=TIMER1_A1_VECTOR
__interrupt void TIMER1_A1_ISR(void)
{
    g_delayCounter++;

    // Add Offset to TACCR0
    Timer_A_setCompareValue(TIMER_A1_BASE,
                            TIMER_A_CAPTURECOMPARE_REGISTER_1,
                            Timer_A_getCaptureCompareCount(
                                TIMER_A1_BASE,
                                TIMER_A_CAPTURECOMPARE_REGISTER_1) + (12500));          //調整時間

    // If 5 seconds have elapsed, exit LPM0 mode
    if(g_delayCounter == 10)
    {
        __bic_SR_register_on_exit(LPM0_bits);
    }

    Timer_A_clearCaptureCompareInterrupt(TIMER_A1_BASE,
                                         TIMER_A_CAPTURECOMPARE_REGISTER_1);

    Timer_A_clearTimerInterrupt(TIMER_A1_BASE);
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=RTC_C_VECTOR
__interrupt void RTC_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(RTC_C_VECTOR))) RTC_ISR (void)
#else
#error Compiler not supported!
#endif
{
    switch(__even_in_range(RTCIV, RTCIV__RT1PSIFG))
    {
        case RTCIV__NONE:      break;       // No interrupts
        case RTCIV__RTCOFIFG:  break;       // RTCOFIFG
        case RTCIV__RTCRDYIFG:              // RTCRDYIFG
            P1OUT ^= 0x01;                  // Toggles P1.0 every second

            timer1++;
            if(timer1 == 10)
            {
                timer1 -= 10;
                timer2++;
                if(timer2 == 10)
                {
                    timer2 -= 10;
                }
            }

            break;
        case RTCIV__RTCTEVIFG:              // RTCEVIFG
            __no_operation();               // Interrupts every minute - SET BREAKPOINT HERE
            break;
        case RTCIV__RTCAIFG:   break;       // RTCAIFG
        case RTCIV__RT0PSIFG:  break;       // RT0PSIFG
        case RTCIV__RT1PSIFG:  break;       // RT1PSIFG
        default: break;
    }
}
